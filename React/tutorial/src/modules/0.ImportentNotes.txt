1. Component: A function which can be used anywhere in your project.
2. Props: Immutable object passed to child component to send data.
3. Event Handeler: A function to handel an event. Don't add () when assigning the handler.
4. controlled component: component's value will be controlled by component's state. e.g. form element's value.
5. memo: menoize a component. it is a higer order component.
6. useMemo: memoize a value
7. useCallback: memoize a function 
8. useState: add state to a functional component
9. useEffect: to perform side effects in a components e.g. api call at mounting, operations which are dependent on some state
    1. no dependency: it will call every time when state or prop will change/ every mount of the component.
    2. empty dependency: only one time it will be called.
    3. veriables inside dependency: it will call when veriables will be changed.
10. if you want to update a state from the eventHandler then you have to add an arrow function.
11. setInterval veriable is used to clear the interval. but the interval will be start execution autometically.

12. Whenever compoent's state or props will change then:
	1. First component will be unmounted. 
	1. Second component will be mounted again.

13. useContext: to grab context from any child. context is a way to pass data to child without props
    1. create a context
    2. provide value into context
    3. use the context name to get the value

14. Reducer: A function defines how the state will be updated.
    1. Accepts a state and action
    2. Return updated state.

14. useReducer: add a state to a functional component 
    1. It accepts a reducer and initial state object.
    2. state should be an object or array
    3. better for manage too many states and state transitions.

15. useCallback: memoize a function.
    1. accept a function
    2. add the state in the dependency array

16. useMemo: memoize a veriable.
    1. accept a function
    2. add the state in the dependency array 
